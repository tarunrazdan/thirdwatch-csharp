/* 
 * Thirdwatch API
 *
 * The first version of the Thirdwatch API is an exciting step forward towards making it easier for developers to pass data to Thirdwatch.  Once you've [registered your website/app](https://thirdwatch.ai) it's easy to start sending data to Thirdwatch.  All endpoints are only accessible via https and are located at `api.thirdwatch.ai`. For instance: you can send event at the moment by ```HTTP POST``` Request to the following URL with your API key in ```Header``` and ```JSON``` data in request body. ```   https://api.thirdwatch.ai/event/v1 ``` Every API request must contain ```API Key``` in header value ```X-THIRDWATCH-API-KEY```  Every event must contain your ```_userId``` (if this is not available, you can alternatively provide a ```_sessionId``` value also in ```_userId```).  JavaScript Fingerprinting module for capturing unique devices and tracking user interaction.  This script will identify unique devices with respect to the browser. For e.g., if chrome is opened in normal mode a unique device id is generated and this will be same if chrome is opened in incognito mode or reinstalled.  Paste the below script onto your webpage, just after the opening `<body>` tag. This script should be added to the page which is accessed externally by the user of your website. For e.g., If you want to track three different webpages then paste the below script onto each webpage, just after the opening `<body>` tag. This script should not be added onto internal tools or admin panels. ```   &lt;script id=\"thirdwatch\"     data-session-cookie-name=\"&lt;cookie_name&gt;\"     data-session-id-value=\"&lt;session_id&gt;\"     data-user-id=\"&lt;user_id&gt;\"     data-app-secret=\"&lt;app_secret&gt;\"     data-is-track-pageview=\"true\"&gt; (function() {         var loadDeviceJs = function() {         var element = document.createElement(\"script\");         element.async = 1;         element.src = \"https://cdn.thirdwatch.ai/tw.min.js\";         document.body.appendChild(element);         };         if (window.addEventListener) {              window.addEventListener(\"load\", loadDeviceJs, false);         } else if (window.attachEvent) {         window.attachEvent(\"onload\", loadDeviceJs);         }     })();   &lt;/script&gt; ``` * `data-session-cookie-name` - - The cookie name where you are saving the unique session id. We will pick the session id by reading its value from the cookie name. (Optional) * `data-session-id-value` - - In case you are not passing `data-session-cookie-name` than you can put session id directly in this parameter. In absence of both `data-session-cookie-name` and `data-session-id-value`, our system will generate a session Id. (Optional) * `data-user-id` - - Unique user id at your end. This can be email id or primary key in the database. In case of guest user, you can insert session Id here. * `data-app-secret` - - Unique App secret generated for you by Thirdwatch. * `data-is-track-pageview` - - If this is set to true, then the url on which this script is running will be sent to Thirdwatch, else the url will not be captured.   The Score API is use to get an up to date cutomer trust score after you have sent transaction event and order successful. This API will provide the riskiness score of the order with reasons. Some examples of when you may want to check the score are before:    - Before Shippement of a package   - Finalizing a money transfer   - Giving access to a prearranged vacation rental   - Sending voucher on mail  ```   https://api.thirdwatch.ai/neo/v1/score?api_key=<your api key>&order_id=<Order id> ```  According to Score you can decide to take action Approve or Reject. Orders with score more than 70 will consider as Riskey orders. We'll provide some reasons also in rules section.   ``` {   \"order_id\": \"OCT45671\",   \"user_id\": \"ajay_245\",   \"order_timestamp\": \"2017-05-09T09:40:45.717Z\",   \"score\": 82,   \"flag\": \"red\",     -\"reasons\": [     {         \"name\": \"_numOfFailedTransactions\",         \"display_name\": \"Number of failed transactions\",         \"flag\": \"green\",         \"value\": \"0\",         \"is_display\": true       },       {         \"name\": \"_accountAge\",         \"display_name\": \"Account age\",         \"flag\": \"red\",         \"value\": \"0\",         \"is_display\": true       },       {         \"name\": \"_numOfOrderSameIp\",         \"display_name\": \"Number of orders from same IP\",         \"flag\": \"red\",         \"value\": \"11\",         \"is_display\": true       }     ] } ``` 
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ai.thirdwatch.Client.SwaggerDateConverter;

namespace ai.thirdwatch.Model
{
    /// <summary>
    /// UpdateAccount
    /// </summary>
    [DataContract]
    public partial class UpdateAccount :  IEquatable<UpdateAccount>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateAccount" /> class.
        /// </summary>
        /// <param name="userId">The user&#39;s account ID according to your systems. Note that user IDs are case sensitive..</param>
        /// <param name="sessionId">The user&#39;s current session ID, used to tie a user&#39;s action before and after login or account creation. Required if no user_id values is provided..</param>
        /// <param name="deviceIp">IP address of the request made by the user. Recommended for historical backfills and customers with mobile apps..</param>
        /// <param name="originTimestamp">Represents the time the event occured in your system. Send as a UNIX timestamp in milliseconds in string..</param>
        /// <param name="userEmail">Email of the user creating this order. Note - If the user&#39;s email is also their account ID in your system, set both the userId and userEmail fields to their email address..</param>
        /// <param name="firstName">Provide the first name associated with the user here..</param>
        /// <param name="lastName">Provide the last name associated with the user here..</param>
        /// <param name="phone">The primary phone number of the user associated with this account. Provide the phone number as a string..</param>
        /// <param name="age">Age of the user e.g. \&quot;25\&quot;.</param>
        /// <param name="gender">Gender of the user e.g. \&quot;_male\&quot;, \&quot;_female\&quot; or \&quot;_trans\&quot;.</param>
        /// <param name="referralCode">Code or promotion used by the user while creating account..</param>
        /// <param name="referrerUserId">The ID of the user that referred the current user to your business. This field is required for detecting referral fraud..</param>
        /// <param name="billingAddress">billingAddress.</param>
        /// <param name="shippingAddress">shippingAddress.</param>
        /// <param name="paymentMethods">The payment information associated with this account. Represented as an array of nested payment_method objects containing payment type, payment gateway, credit card bin, etc..</param>
        /// <param name="promotions">The list of promotions that apply to this account. You can add one or more promotions when creating or updating an order. Represented as a JSON array of promotion objects. You can also separately add promotions to the account via the addPromotion event..</param>
        /// <param name="socialSignOnType">If the user logged in with a social identify provider, give the name here. e.g. _google, _facebook, _twitter, _linkedin, _other.</param>
        /// <param name="emailConfirmedStatus">Status of email verification. e.g. _success, _failure, _pending.</param>
        /// <param name="phoneConfirmedStatus">Status of phone verification. e.g. _success, _failure, _pending.</param>
        /// <param name="isNewsletterSubscribed">Is user subscribed for newsletter. e.g. true, false.</param>
        /// <param name="accountStatus">Current status of account, e.g. _active, _inactive.</param>
        /// <param name="facebookId">Facebook user id or token of the user. This can help to varify his social identity..</param>
        /// <param name="googleId">Google user id or token of the user. This can help to varify his social identity..</param>
        /// <param name="twitterId">Twitter handle or token of the user. This can help to varify his social identity..</param>
        /// <param name="customInfo">customInfo.</param>
        public UpdateAccount(string userId = default(string), string sessionId = default(string), string deviceIp = default(string), string originTimestamp = default(string), string userEmail = default(string), string firstName = default(string), string lastName = default(string), string phone = default(string), string age = default(string), string gender = default(string), string referralCode = default(string), string referrerUserId = default(string), BillingAddress billingAddress = default(BillingAddress), ShippingAddress shippingAddress = default(ShippingAddress), List<PaymentMethod> paymentMethods = default(List<PaymentMethod>), List<Promotion> promotions = default(List<Promotion>), string socialSignOnType = default(string), string emailConfirmedStatus = default(string), string phoneConfirmedStatus = default(string), bool? isNewsletterSubscribed = default(bool?), string accountStatus = default(string), string facebookId = default(string), string googleId = default(string), string twitterId = default(string), CustomInfo customInfo = default(CustomInfo))
        {
            this.userId = userId;
            this.sessionId = sessionId;
            this.deviceIp = deviceIp;
            this.originTimestamp = originTimestamp;
            this.userEmail = userEmail;
            this.firstName = firstName;
            this.lastName = lastName;
            this.phone = phone;
            this.age = age;
            this.gender = gender;
            this.referralCode = referralCode;
            this.referrerUserId = referrerUserId;
            this.billingAddress = billingAddress;
            this.shippingAddress = shippingAddress;
            this.paymentMethods = paymentMethods;
            this.promotions = promotions;
            this.socialSignOnType = socialSignOnType;
            this.emailConfirmedStatus = emailConfirmedStatus;
            this.phoneConfirmedStatus = phoneConfirmedStatus;
            this.isNewsletterSubscribed = isNewsletterSubscribed;
            this.accountStatus = accountStatus;
            this.facebookId = facebookId;
            this.googleId = googleId;
            this.twitterId = twitterId;
            this.customInfo = customInfo;
        }
        
        /// <summary>
        /// The user&#39;s account ID according to your systems. Note that user IDs are case sensitive.
        /// </summary>
        /// <value>The user&#39;s account ID according to your systems. Note that user IDs are case sensitive.</value>
        [DataMember(Name="_userId", EmitDefaultValue=false)]
        public string userId { get; set; }

        /// <summary>
        /// The user&#39;s current session ID, used to tie a user&#39;s action before and after login or account creation. Required if no user_id values is provided.
        /// </summary>
        /// <value>The user&#39;s current session ID, used to tie a user&#39;s action before and after login or account creation. Required if no user_id values is provided.</value>
        [DataMember(Name="_sessionId", EmitDefaultValue=false)]
        public string sessionId { get; set; }

        /// <summary>
        /// IP address of the request made by the user. Recommended for historical backfills and customers with mobile apps.
        /// </summary>
        /// <value>IP address of the request made by the user. Recommended for historical backfills and customers with mobile apps.</value>
        [DataMember(Name="_deviceIp", EmitDefaultValue=false)]
        public string deviceIp { get; set; }

        /// <summary>
        /// Represents the time the event occured in your system. Send as a UNIX timestamp in milliseconds in string.
        /// </summary>
        /// <value>Represents the time the event occured in your system. Send as a UNIX timestamp in milliseconds in string.</value>
        [DataMember(Name="_originTimestamp", EmitDefaultValue=false)]
        public string originTimestamp { get; set; }

        /// <summary>
        /// Email of the user creating this order. Note - If the user&#39;s email is also their account ID in your system, set both the userId and userEmail fields to their email address.
        /// </summary>
        /// <value>Email of the user creating this order. Note - If the user&#39;s email is also their account ID in your system, set both the userId and userEmail fields to their email address.</value>
        [DataMember(Name="_userEmail", EmitDefaultValue=false)]
        public string userEmail { get; set; }

        /// <summary>
        /// Provide the first name associated with the user here.
        /// </summary>
        /// <value>Provide the first name associated with the user here.</value>
        [DataMember(Name="_firstName", EmitDefaultValue=false)]
        public string firstName { get; set; }

        /// <summary>
        /// Provide the last name associated with the user here.
        /// </summary>
        /// <value>Provide the last name associated with the user here.</value>
        [DataMember(Name="_lastName", EmitDefaultValue=false)]
        public string lastName { get; set; }

        /// <summary>
        /// The primary phone number of the user associated with this account. Provide the phone number as a string.
        /// </summary>
        /// <value>The primary phone number of the user associated with this account. Provide the phone number as a string.</value>
        [DataMember(Name="_phone", EmitDefaultValue=false)]
        public string phone { get; set; }

        /// <summary>
        /// Age of the user e.g. \&quot;25\&quot;
        /// </summary>
        /// <value>Age of the user e.g. \&quot;25\&quot;</value>
        [DataMember(Name="_age", EmitDefaultValue=false)]
        public string age { get; set; }

        /// <summary>
        /// Gender of the user e.g. \&quot;_male\&quot;, \&quot;_female\&quot; or \&quot;_trans\&quot;
        /// </summary>
        /// <value>Gender of the user e.g. \&quot;_male\&quot;, \&quot;_female\&quot; or \&quot;_trans\&quot;</value>
        [DataMember(Name="_gender", EmitDefaultValue=false)]
        public string gender { get; set; }

        /// <summary>
        /// Code or promotion used by the user while creating account.
        /// </summary>
        /// <value>Code or promotion used by the user while creating account.</value>
        [DataMember(Name="_referralCode", EmitDefaultValue=false)]
        public string referralCode { get; set; }

        /// <summary>
        /// The ID of the user that referred the current user to your business. This field is required for detecting referral fraud.
        /// </summary>
        /// <value>The ID of the user that referred the current user to your business. This field is required for detecting referral fraud.</value>
        [DataMember(Name="_referrerUserId", EmitDefaultValue=false)]
        public string referrerUserId { get; set; }

        /// <summary>
        /// Gets or Sets billingAddress
        /// </summary>
        [DataMember(Name="_billingAddress", EmitDefaultValue=false)]
        public BillingAddress billingAddress { get; set; }

        /// <summary>
        /// Gets or Sets shippingAddress
        /// </summary>
        [DataMember(Name="_shippingAddress", EmitDefaultValue=false)]
        public ShippingAddress shippingAddress { get; set; }

        /// <summary>
        /// The payment information associated with this account. Represented as an array of nested payment_method objects containing payment type, payment gateway, credit card bin, etc.
        /// </summary>
        /// <value>The payment information associated with this account. Represented as an array of nested payment_method objects containing payment type, payment gateway, credit card bin, etc.</value>
        [DataMember(Name="_paymentMethods", EmitDefaultValue=false)]
        public List<PaymentMethod> paymentMethods { get; set; }

        /// <summary>
        /// The list of promotions that apply to this account. You can add one or more promotions when creating or updating an order. Represented as a JSON array of promotion objects. You can also separately add promotions to the account via the addPromotion event.
        /// </summary>
        /// <value>The list of promotions that apply to this account. You can add one or more promotions when creating or updating an order. Represented as a JSON array of promotion objects. You can also separately add promotions to the account via the addPromotion event.</value>
        [DataMember(Name="_promotions", EmitDefaultValue=false)]
        public List<Promotion> promotions { get; set; }

        /// <summary>
        /// If the user logged in with a social identify provider, give the name here. e.g. _google, _facebook, _twitter, _linkedin, _other
        /// </summary>
        /// <value>If the user logged in with a social identify provider, give the name here. e.g. _google, _facebook, _twitter, _linkedin, _other</value>
        [DataMember(Name="_socialSignOnType", EmitDefaultValue=false)]
        public string socialSignOnType { get; set; }

        /// <summary>
        /// Status of email verification. e.g. _success, _failure, _pending
        /// </summary>
        /// <value>Status of email verification. e.g. _success, _failure, _pending</value>
        [DataMember(Name="_emailConfirmedStatus", EmitDefaultValue=false)]
        public string emailConfirmedStatus { get; set; }

        /// <summary>
        /// Status of phone verification. e.g. _success, _failure, _pending
        /// </summary>
        /// <value>Status of phone verification. e.g. _success, _failure, _pending</value>
        [DataMember(Name="_phoneConfirmedStatus", EmitDefaultValue=false)]
        public string phoneConfirmedStatus { get; set; }

        /// <summary>
        /// Is user subscribed for newsletter. e.g. true, false
        /// </summary>
        /// <value>Is user subscribed for newsletter. e.g. true, false</value>
        [DataMember(Name="_isNewsletterSubscribed", EmitDefaultValue=false)]
        public bool? isNewsletterSubscribed { get; set; }

        /// <summary>
        /// Current status of account, e.g. _active, _inactive
        /// </summary>
        /// <value>Current status of account, e.g. _active, _inactive</value>
        [DataMember(Name="_accountStatus", EmitDefaultValue=false)]
        public string accountStatus { get; set; }

        /// <summary>
        /// Facebook user id or token of the user. This can help to varify his social identity.
        /// </summary>
        /// <value>Facebook user id or token of the user. This can help to varify his social identity.</value>
        [DataMember(Name="_facebookId", EmitDefaultValue=false)]
        public string facebookId { get; set; }

        /// <summary>
        /// Google user id or token of the user. This can help to varify his social identity.
        /// </summary>
        /// <value>Google user id or token of the user. This can help to varify his social identity.</value>
        [DataMember(Name="_googleId", EmitDefaultValue=false)]
        public string googleId { get; set; }

        /// <summary>
        /// Twitter handle or token of the user. This can help to varify his social identity.
        /// </summary>
        /// <value>Twitter handle or token of the user. This can help to varify his social identity.</value>
        [DataMember(Name="_twitterId", EmitDefaultValue=false)]
        public string twitterId { get; set; }

        /// <summary>
        /// Gets or Sets customInfo
        /// </summary>
        [DataMember(Name="_customInfo", EmitDefaultValue=false)]
        public CustomInfo customInfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateAccount {\n");
            sb.Append("  userId: ").Append(userId).Append("\n");
            sb.Append("  sessionId: ").Append(sessionId).Append("\n");
            sb.Append("  deviceIp: ").Append(deviceIp).Append("\n");
            sb.Append("  originTimestamp: ").Append(originTimestamp).Append("\n");
            sb.Append("  userEmail: ").Append(userEmail).Append("\n");
            sb.Append("  firstName: ").Append(firstName).Append("\n");
            sb.Append("  lastName: ").Append(lastName).Append("\n");
            sb.Append("  phone: ").Append(phone).Append("\n");
            sb.Append("  age: ").Append(age).Append("\n");
            sb.Append("  gender: ").Append(gender).Append("\n");
            sb.Append("  referralCode: ").Append(referralCode).Append("\n");
            sb.Append("  referrerUserId: ").Append(referrerUserId).Append("\n");
            sb.Append("  billingAddress: ").Append(billingAddress).Append("\n");
            sb.Append("  shippingAddress: ").Append(shippingAddress).Append("\n");
            sb.Append("  paymentMethods: ").Append(paymentMethods).Append("\n");
            sb.Append("  promotions: ").Append(promotions).Append("\n");
            sb.Append("  socialSignOnType: ").Append(socialSignOnType).Append("\n");
            sb.Append("  emailConfirmedStatus: ").Append(emailConfirmedStatus).Append("\n");
            sb.Append("  phoneConfirmedStatus: ").Append(phoneConfirmedStatus).Append("\n");
            sb.Append("  isNewsletterSubscribed: ").Append(isNewsletterSubscribed).Append("\n");
            sb.Append("  accountStatus: ").Append(accountStatus).Append("\n");
            sb.Append("  facebookId: ").Append(facebookId).Append("\n");
            sb.Append("  googleId: ").Append(googleId).Append("\n");
            sb.Append("  twitterId: ").Append(twitterId).Append("\n");
            sb.Append("  customInfo: ").Append(customInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateAccount);
        }

        /// <summary>
        /// Returns true if UpdateAccount instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateAccount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateAccount input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.userId == input.userId ||
                    (this.userId != null &&
                    this.userId.Equals(input.userId))
                ) && 
                (
                    this.sessionId == input.sessionId ||
                    (this.sessionId != null &&
                    this.sessionId.Equals(input.sessionId))
                ) && 
                (
                    this.deviceIp == input.deviceIp ||
                    (this.deviceIp != null &&
                    this.deviceIp.Equals(input.deviceIp))
                ) && 
                (
                    this.originTimestamp == input.originTimestamp ||
                    (this.originTimestamp != null &&
                    this.originTimestamp.Equals(input.originTimestamp))
                ) && 
                (
                    this.userEmail == input.userEmail ||
                    (this.userEmail != null &&
                    this.userEmail.Equals(input.userEmail))
                ) && 
                (
                    this.firstName == input.firstName ||
                    (this.firstName != null &&
                    this.firstName.Equals(input.firstName))
                ) && 
                (
                    this.lastName == input.lastName ||
                    (this.lastName != null &&
                    this.lastName.Equals(input.lastName))
                ) && 
                (
                    this.phone == input.phone ||
                    (this.phone != null &&
                    this.phone.Equals(input.phone))
                ) && 
                (
                    this.age == input.age ||
                    (this.age != null &&
                    this.age.Equals(input.age))
                ) && 
                (
                    this.gender == input.gender ||
                    (this.gender != null &&
                    this.gender.Equals(input.gender))
                ) && 
                (
                    this.referralCode == input.referralCode ||
                    (this.referralCode != null &&
                    this.referralCode.Equals(input.referralCode))
                ) && 
                (
                    this.referrerUserId == input.referrerUserId ||
                    (this.referrerUserId != null &&
                    this.referrerUserId.Equals(input.referrerUserId))
                ) && 
                (
                    this.billingAddress == input.billingAddress ||
                    (this.billingAddress != null &&
                    this.billingAddress.Equals(input.billingAddress))
                ) && 
                (
                    this.shippingAddress == input.shippingAddress ||
                    (this.shippingAddress != null &&
                    this.shippingAddress.Equals(input.shippingAddress))
                ) && 
                (
                    this.paymentMethods == input.paymentMethods ||
                    this.paymentMethods != null &&
                    this.paymentMethods.SequenceEqual(input.paymentMethods)
                ) && 
                (
                    this.promotions == input.promotions ||
                    this.promotions != null &&
                    this.promotions.SequenceEqual(input.promotions)
                ) && 
                (
                    this.socialSignOnType == input.socialSignOnType ||
                    (this.socialSignOnType != null &&
                    this.socialSignOnType.Equals(input.socialSignOnType))
                ) && 
                (
                    this.emailConfirmedStatus == input.emailConfirmedStatus ||
                    (this.emailConfirmedStatus != null &&
                    this.emailConfirmedStatus.Equals(input.emailConfirmedStatus))
                ) && 
                (
                    this.phoneConfirmedStatus == input.phoneConfirmedStatus ||
                    (this.phoneConfirmedStatus != null &&
                    this.phoneConfirmedStatus.Equals(input.phoneConfirmedStatus))
                ) && 
                (
                    this.isNewsletterSubscribed == input.isNewsletterSubscribed ||
                    (this.isNewsletterSubscribed != null &&
                    this.isNewsletterSubscribed.Equals(input.isNewsletterSubscribed))
                ) && 
                (
                    this.accountStatus == input.accountStatus ||
                    (this.accountStatus != null &&
                    this.accountStatus.Equals(input.accountStatus))
                ) && 
                (
                    this.facebookId == input.facebookId ||
                    (this.facebookId != null &&
                    this.facebookId.Equals(input.facebookId))
                ) && 
                (
                    this.googleId == input.googleId ||
                    (this.googleId != null &&
                    this.googleId.Equals(input.googleId))
                ) && 
                (
                    this.twitterId == input.twitterId ||
                    (this.twitterId != null &&
                    this.twitterId.Equals(input.twitterId))
                ) && 
                (
                    this.customInfo == input.customInfo ||
                    (this.customInfo != null &&
                    this.customInfo.Equals(input.customInfo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.userId != null)
                    hashCode = hashCode * 59 + this.userId.GetHashCode();
                if (this.sessionId != null)
                    hashCode = hashCode * 59 + this.sessionId.GetHashCode();
                if (this.deviceIp != null)
                    hashCode = hashCode * 59 + this.deviceIp.GetHashCode();
                if (this.originTimestamp != null)
                    hashCode = hashCode * 59 + this.originTimestamp.GetHashCode();
                if (this.userEmail != null)
                    hashCode = hashCode * 59 + this.userEmail.GetHashCode();
                if (this.firstName != null)
                    hashCode = hashCode * 59 + this.firstName.GetHashCode();
                if (this.lastName != null)
                    hashCode = hashCode * 59 + this.lastName.GetHashCode();
                if (this.phone != null)
                    hashCode = hashCode * 59 + this.phone.GetHashCode();
                if (this.age != null)
                    hashCode = hashCode * 59 + this.age.GetHashCode();
                if (this.gender != null)
                    hashCode = hashCode * 59 + this.gender.GetHashCode();
                if (this.referralCode != null)
                    hashCode = hashCode * 59 + this.referralCode.GetHashCode();
                if (this.referrerUserId != null)
                    hashCode = hashCode * 59 + this.referrerUserId.GetHashCode();
                if (this.billingAddress != null)
                    hashCode = hashCode * 59 + this.billingAddress.GetHashCode();
                if (this.shippingAddress != null)
                    hashCode = hashCode * 59 + this.shippingAddress.GetHashCode();
                if (this.paymentMethods != null)
                    hashCode = hashCode * 59 + this.paymentMethods.GetHashCode();
                if (this.promotions != null)
                    hashCode = hashCode * 59 + this.promotions.GetHashCode();
                if (this.socialSignOnType != null)
                    hashCode = hashCode * 59 + this.socialSignOnType.GetHashCode();
                if (this.emailConfirmedStatus != null)
                    hashCode = hashCode * 59 + this.emailConfirmedStatus.GetHashCode();
                if (this.phoneConfirmedStatus != null)
                    hashCode = hashCode * 59 + this.phoneConfirmedStatus.GetHashCode();
                if (this.isNewsletterSubscribed != null)
                    hashCode = hashCode * 59 + this.isNewsletterSubscribed.GetHashCode();
                if (this.accountStatus != null)
                    hashCode = hashCode * 59 + this.accountStatus.GetHashCode();
                if (this.facebookId != null)
                    hashCode = hashCode * 59 + this.facebookId.GetHashCode();
                if (this.googleId != null)
                    hashCode = hashCode * 59 + this.googleId.GetHashCode();
                if (this.twitterId != null)
                    hashCode = hashCode * 59 + this.twitterId.GetHashCode();
                if (this.customInfo != null)
                    hashCode = hashCode * 59 + this.customInfo.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
