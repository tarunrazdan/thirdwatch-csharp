/* 
 * Thirdwatch API
 *
 * The first version of the Thirdwatch API is an exciting step forward towards making it easier for developers to pass data to Thirdwatch.  Once you've [registered your website/app](https://thirdwatch.ai) it's easy to start sending data to Thirdwatch.  All endpoints are only accessible via https and are located at `api.thirdwatch.ai`. For instance: you can send event at the moment by ```HTTP POST``` Request to the following URL with your API key in ```Header``` and ```JSON``` data in request body. ```   https://api.thirdwatch.ai/event/v1 ``` Every API request must contain ```API Key``` in header value ```X-THIRDWATCH-API-KEY```  Every event must contain your ```_userId``` (if this is not available, you can alternatively provide a ```_sessionId``` value also in ```_userId```).  JavaScript Fingerprinting module for capturing unique devices and tracking user interaction.  This script will identify unique devices with respect to the browser. For e.g., if chrome is opened in normal mode a unique device id is generated and this will be same if chrome is opened in incognito mode or reinstalled.  Paste the below script onto your webpage, just after the opening `<body>` tag. This script should be added to the page which is accessed externally by the user of your website. For e.g., If you want to track three different webpages then paste the below script onto each webpage, just after the opening `<body>` tag. This script should not be added onto internal tools or admin panels. ```   &lt;script id=\"thirdwatch\"     data-session-cookie-name=\"&lt;cookie_name&gt;\"     data-session-id-value=\"&lt;session_id&gt;\"     data-user-id=\"&lt;user_id&gt;\"     data-app-secret=\"&lt;app_secret&gt;\"     data-is-track-pageview=\"true\"&gt; (function() {         var loadDeviceJs = function() {         var element = document.createElement(\"script\");         element.async = 1;         element.src = \"https://cdn.thirdwatch.ai/tw.min.js\";         document.body.appendChild(element);         };         if (window.addEventListener) {              window.addEventListener(\"load\", loadDeviceJs, false);         } else if (window.attachEvent) {         window.attachEvent(\"onload\", loadDeviceJs);         }     })();   &lt;/script&gt; ``` * `data-session-cookie-name` - - The cookie name where you are saving the unique session id. We will pick the session id by reading its value from the cookie name. (Optional) * `data-session-id-value` - - In case you are not passing `data-session-cookie-name` than you can put session id directly in this parameter. In absence of both `data-session-cookie-name` and `data-session-id-value`, our system will generate a session Id. (Optional) * `data-user-id` - - Unique user id at your end. This can be email id or primary key in the database. In case of guest user, you can insert session Id here. * `data-app-secret` - - Unique App secret generated for you by Thirdwatch. * `data-is-track-pageview` - - If this is set to true, then the url on which this script is running will be sent to Thirdwatch, else the url will not be captured.   The Score API is use to get an up to date cutomer trust score after you have sent transaction event and order successful. This API will provide the riskiness score of the order with reasons. Some examples of when you may want to check the score are before:    - Before Shippement of a package   - Finalizing a money transfer   - Giving access to a prearranged vacation rental   - Sending voucher on mail  ```   https://api.thirdwatch.ai/neo/v1/score?api_key=<your api key>&order_id=<Order id> ```  According to Score you can decide to take action Approve or Reject. Orders with score more than 70 will consider as Riskey orders. We'll provide some reasons also in rules section.   ``` {   \"order_id\": \"OCT45671\",   \"user_id\": \"ajay_245\",   \"order_timestamp\": \"2017-05-09T09:40:45.717Z\",   \"score\": 82,   \"flag\": \"red\",     -\"reasons\": [     {         \"name\": \"_numOfFailedTransactions\",         \"display_name\": \"Number of failed transactions\",         \"flag\": \"green\",         \"value\": \"0\",         \"is_display\": true       },       {         \"name\": \"_accountAge\",         \"display_name\": \"Account age\",         \"flag\": \"red\",         \"value\": \"0\",         \"is_display\": true       },       {         \"name\": \"_numOfOrderSameIp\",         \"display_name\": \"Number of orders from same IP\",         \"flag\": \"red\",         \"value\": \"11\",         \"is_display\": true       }     ] } ``` 
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ai.thirdwatch.Client.SwaggerDateConverter;

namespace ai.thirdwatch.Model
{
    /// <summary>
    /// ItemStatus
    /// </summary>
    [DataContract]
    public partial class ItemStatus :  IEquatable<ItemStatus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemStatus" /> class.
        /// </summary>
        /// <param name="userId">The user&#39;s account ID according to your systems. Note that user IDs are case sensitive..</param>
        /// <param name="sessionId">The user&#39;s current session ID, used to tie a user&#39;s action before and after login or account creation. Required if no user_id values is provided..</param>
        /// <param name="orderId">The ID for the order that this chargeback is filed against. This field is not required if this chargeback was filed against a transaction with no _orderId..</param>
        /// <param name="itemId">The item&#39;s unique identifier according to your systems. Use the same ID that you would use to look up items on your website&#39;s database..</param>
        /// <param name="_itemStatus">Indicates the high-level state of the order. e.g. _approved, _canceled, _held, _fulfilled, _returned, _rto.</param>
        /// <param name="reason">The reason for a cancellation. e.g. _paymentRisk, _abuse, _policy, _other.</param>
        /// <param name="shippingCost">if _approved or _fulfilled than pass the shipping cost. e.g. \&quot;50\&quot;.</param>
        /// <param name="trackingNumber">if _approved or _fulfilled than pass the tracking number. e.g. \&quot;55327470\&quot;.</param>
        /// <param name="trackingMethod">if _approved or _fulfilled than pass the tracking url. e.g. \&quot;http://fedex.com/track?q&#x3D;abc123\&quot;.</param>
        /// <param name="source">The source of a decision. e.g. _automated, _manualReview\&quot;.</param>
        /// <param name="analyst">The analyst who made the decision, if manual..</param>
        /// <param name="description">Any additional information about this order status change..</param>
        /// <param name="customInfo">customInfo.</param>
        public ItemStatus(string userId = default(string), string sessionId = default(string), string orderId = default(string), string itemId = default(string), string _itemStatus = default(string), string reason = default(string), string shippingCost = default(string), string trackingNumber = default(string), string trackingMethod = default(string), string source = default(string), string analyst = default(string), string description = default(string), CustomInfo customInfo = default(CustomInfo))
        {
            this.userId = userId;
            this.sessionId = sessionId;
            this.orderId = orderId;
            this.itemId = itemId;
            this._itemStatus = _itemStatus;
            this.reason = reason;
            this.shippingCost = shippingCost;
            this.trackingNumber = trackingNumber;
            this.trackingMethod = trackingMethod;
            this.source = source;
            this.analyst = analyst;
            this.description = description;
            this.customInfo = customInfo;
        }
        
        /// <summary>
        /// The user&#39;s account ID according to your systems. Note that user IDs are case sensitive.
        /// </summary>
        /// <value>The user&#39;s account ID according to your systems. Note that user IDs are case sensitive.</value>
        [DataMember(Name="_userId", EmitDefaultValue=false)]
        public string userId { get; set; }

        /// <summary>
        /// The user&#39;s current session ID, used to tie a user&#39;s action before and after login or account creation. Required if no user_id values is provided.
        /// </summary>
        /// <value>The user&#39;s current session ID, used to tie a user&#39;s action before and after login or account creation. Required if no user_id values is provided.</value>
        [DataMember(Name="_sessionId", EmitDefaultValue=false)]
        public string sessionId { get; set; }

        /// <summary>
        /// The ID for the order that this chargeback is filed against. This field is not required if this chargeback was filed against a transaction with no _orderId.
        /// </summary>
        /// <value>The ID for the order that this chargeback is filed against. This field is not required if this chargeback was filed against a transaction with no _orderId.</value>
        [DataMember(Name="_orderId", EmitDefaultValue=false)]
        public string orderId { get; set; }

        /// <summary>
        /// The item&#39;s unique identifier according to your systems. Use the same ID that you would use to look up items on your website&#39;s database.
        /// </summary>
        /// <value>The item&#39;s unique identifier according to your systems. Use the same ID that you would use to look up items on your website&#39;s database.</value>
        [DataMember(Name="_itemId", EmitDefaultValue=false)]
        public string itemId { get; set; }

        /// <summary>
        /// Indicates the high-level state of the order. e.g. _approved, _canceled, _held, _fulfilled, _returned, _rto
        /// </summary>
        /// <value>Indicates the high-level state of the order. e.g. _approved, _canceled, _held, _fulfilled, _returned, _rto</value>
        [DataMember(Name="_itemStatus", EmitDefaultValue=false)]
        public string _itemStatus { get; set; }

        /// <summary>
        /// The reason for a cancellation. e.g. _paymentRisk, _abuse, _policy, _other
        /// </summary>
        /// <value>The reason for a cancellation. e.g. _paymentRisk, _abuse, _policy, _other</value>
        [DataMember(Name="_reason", EmitDefaultValue=false)]
        public string reason { get; set; }

        /// <summary>
        /// if _approved or _fulfilled than pass the shipping cost. e.g. \&quot;50\&quot;
        /// </summary>
        /// <value>if _approved or _fulfilled than pass the shipping cost. e.g. \&quot;50\&quot;</value>
        [DataMember(Name="_shippingCost", EmitDefaultValue=false)]
        public string shippingCost { get; set; }

        /// <summary>
        /// if _approved or _fulfilled than pass the tracking number. e.g. \&quot;55327470\&quot;
        /// </summary>
        /// <value>if _approved or _fulfilled than pass the tracking number. e.g. \&quot;55327470\&quot;</value>
        [DataMember(Name="_trackingNumber", EmitDefaultValue=false)]
        public string trackingNumber { get; set; }

        /// <summary>
        /// if _approved or _fulfilled than pass the tracking url. e.g. \&quot;http://fedex.com/track?q&#x3D;abc123\&quot;
        /// </summary>
        /// <value>if _approved or _fulfilled than pass the tracking url. e.g. \&quot;http://fedex.com/track?q&#x3D;abc123\&quot;</value>
        [DataMember(Name="_trackingMethod", EmitDefaultValue=false)]
        public string trackingMethod { get; set; }

        /// <summary>
        /// The source of a decision. e.g. _automated, _manualReview\&quot;
        /// </summary>
        /// <value>The source of a decision. e.g. _automated, _manualReview\&quot;</value>
        [DataMember(Name="_source", EmitDefaultValue=false)]
        public string source { get; set; }

        /// <summary>
        /// The analyst who made the decision, if manual.
        /// </summary>
        /// <value>The analyst who made the decision, if manual.</value>
        [DataMember(Name="_analyst", EmitDefaultValue=false)]
        public string analyst { get; set; }

        /// <summary>
        /// Any additional information about this order status change.
        /// </summary>
        /// <value>Any additional information about this order status change.</value>
        [DataMember(Name="_description", EmitDefaultValue=false)]
        public string description { get; set; }

        /// <summary>
        /// Gets or Sets customInfo
        /// </summary>
        [DataMember(Name="_customInfo", EmitDefaultValue=false)]
        public CustomInfo customInfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemStatus {\n");
            sb.Append("  userId: ").Append(userId).Append("\n");
            sb.Append("  sessionId: ").Append(sessionId).Append("\n");
            sb.Append("  orderId: ").Append(orderId).Append("\n");
            sb.Append("  itemId: ").Append(itemId).Append("\n");
            sb.Append("  _itemStatus: ").Append(_itemStatus).Append("\n");
            sb.Append("  reason: ").Append(reason).Append("\n");
            sb.Append("  shippingCost: ").Append(shippingCost).Append("\n");
            sb.Append("  trackingNumber: ").Append(trackingNumber).Append("\n");
            sb.Append("  trackingMethod: ").Append(trackingMethod).Append("\n");
            sb.Append("  source: ").Append(source).Append("\n");
            sb.Append("  analyst: ").Append(analyst).Append("\n");
            sb.Append("  description: ").Append(description).Append("\n");
            sb.Append("  customInfo: ").Append(customInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ItemStatus);
        }

        /// <summary>
        /// Returns true if ItemStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of ItemStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemStatus input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.userId == input.userId ||
                    (this.userId != null &&
                    this.userId.Equals(input.userId))
                ) && 
                (
                    this.sessionId == input.sessionId ||
                    (this.sessionId != null &&
                    this.sessionId.Equals(input.sessionId))
                ) && 
                (
                    this.orderId == input.orderId ||
                    (this.orderId != null &&
                    this.orderId.Equals(input.orderId))
                ) && 
                (
                    this.itemId == input.itemId ||
                    (this.itemId != null &&
                    this.itemId.Equals(input.itemId))
                ) && 
                (
                    this._itemStatus == input._itemStatus ||
                    (this._itemStatus != null &&
                    this._itemStatus.Equals(input._itemStatus))
                ) && 
                (
                    this.reason == input.reason ||
                    (this.reason != null &&
                    this.reason.Equals(input.reason))
                ) && 
                (
                    this.shippingCost == input.shippingCost ||
                    (this.shippingCost != null &&
                    this.shippingCost.Equals(input.shippingCost))
                ) && 
                (
                    this.trackingNumber == input.trackingNumber ||
                    (this.trackingNumber != null &&
                    this.trackingNumber.Equals(input.trackingNumber))
                ) && 
                (
                    this.trackingMethod == input.trackingMethod ||
                    (this.trackingMethod != null &&
                    this.trackingMethod.Equals(input.trackingMethod))
                ) && 
                (
                    this.source == input.source ||
                    (this.source != null &&
                    this.source.Equals(input.source))
                ) && 
                (
                    this.analyst == input.analyst ||
                    (this.analyst != null &&
                    this.analyst.Equals(input.analyst))
                ) && 
                (
                    this.description == input.description ||
                    (this.description != null &&
                    this.description.Equals(input.description))
                ) && 
                (
                    this.customInfo == input.customInfo ||
                    (this.customInfo != null &&
                    this.customInfo.Equals(input.customInfo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.userId != null)
                    hashCode = hashCode * 59 + this.userId.GetHashCode();
                if (this.sessionId != null)
                    hashCode = hashCode * 59 + this.sessionId.GetHashCode();
                if (this.orderId != null)
                    hashCode = hashCode * 59 + this.orderId.GetHashCode();
                if (this.itemId != null)
                    hashCode = hashCode * 59 + this.itemId.GetHashCode();
                if (this._itemStatus != null)
                    hashCode = hashCode * 59 + this._itemStatus.GetHashCode();
                if (this.reason != null)
                    hashCode = hashCode * 59 + this.reason.GetHashCode();
                if (this.shippingCost != null)
                    hashCode = hashCode * 59 + this.shippingCost.GetHashCode();
                if (this.trackingNumber != null)
                    hashCode = hashCode * 59 + this.trackingNumber.GetHashCode();
                if (this.trackingMethod != null)
                    hashCode = hashCode * 59 + this.trackingMethod.GetHashCode();
                if (this.source != null)
                    hashCode = hashCode * 59 + this.source.GetHashCode();
                if (this.analyst != null)
                    hashCode = hashCode * 59 + this.analyst.GetHashCode();
                if (this.description != null)
                    hashCode = hashCode * 59 + this.description.GetHashCode();
                if (this.customInfo != null)
                    hashCode = hashCode * 59 + this.customInfo.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
