/* 
 * Thirdwatch API
 *
 * The first version of the Thirdwatch API is an exciting step forward towards making it easier for developers to pass data to Thirdwatch.  Once you've [registered your website/app](https://thirdwatch.ai) it's easy to start sending data to Thirdwatch.  All endpoints are only accessible via https and are located at `api.thirdwatch.ai`. For instance: you can send event at the moment by ```HTTP POST``` Request to the following URL with your API key in ```Header``` and ```JSON``` data in request body. ```   https://api.thirdwatch.ai/event/v1 ``` Every API request must contain ```API Key``` in header value ```X-THIRDWATCH-API-KEY```  Every event must contain your ```_userId``` (if this is not available, you can alternatively provide a ```_sessionId``` value also in ```_userId```).  JavaScript Fingerprinting module for capturing unique devices and tracking user interaction.  This script will identify unique devices with respect to the browser. For e.g., if chrome is opened in normal mode a unique device id is generated and this will be same if chrome is opened in incognito mode or reinstalled.  Paste the below script onto your webpage, just after the opening `<body>` tag. This script should be added to the page which is accessed externally by the user of your website. For e.g., If you want to track three different webpages then paste the below script onto each webpage, just after the opening `<body>` tag. This script should not be added onto internal tools or admin panels. ```   &lt;script id=\"thirdwatch\"     data-session-cookie-name=\"&lt;cookie_name&gt;\"     data-session-id-value=\"&lt;session_id&gt;\"     data-user-id=\"&lt;user_id&gt;\"     data-app-secret=\"&lt;app_secret&gt;\"     data-is-track-pageview=\"true\"&gt; (function() {         var loadDeviceJs = function() {         var element = document.createElement(\"script\");         element.async = 1;         element.src = \"https://cdn.thirdwatch.ai/tw.min.js\";         document.body.appendChild(element);         };         if (window.addEventListener) {              window.addEventListener(\"load\", loadDeviceJs, false);         } else if (window.attachEvent) {         window.attachEvent(\"onload\", loadDeviceJs);         }     })();   &lt;/script&gt; ``` * `data-session-cookie-name` - - The cookie name where you are saving the unique session id. We will pick the session id by reading its value from the cookie name. (Optional) * `data-session-id-value` - - In case you are not passing `data-session-cookie-name` than you can put session id directly in this parameter. In absence of both `data-session-cookie-name` and `data-session-id-value`, our system will generate a session Id. (Optional) * `data-user-id` - - Unique user id at your end. This can be email id or primary key in the database. In case of guest user, you can insert session Id here. * `data-app-secret` - - Unique App secret generated for you by Thirdwatch. * `data-is-track-pageview` - - If this is set to true, then the url on which this script is running will be sent to Thirdwatch, else the url will not be captured.   The Score API is use to get an up to date cutomer trust score after you have sent transaction event and order successful. This API will provide the riskiness score of the order with reasons. Some examples of when you may want to check the score are before:    - Before Shippement of a package   - Finalizing a money transfer   - Giving access to a prearranged vacation rental   - Sending voucher on mail  ```   https://api.thirdwatch.ai/neo/v1/score?api_key=<your api key>&order_id=<Order id> ```  According to Score you can decide to take action Approve or Reject. Orders with score more than 70 will consider as Riskey orders. We'll provide some reasons also in rules section.   ``` {   \"order_id\": \"OCT45671\",   \"user_id\": \"ajay_245\",   \"order_timestamp\": \"2017-05-09T09:40:45.717Z\",   \"score\": 82,   \"flag\": \"red\",     -\"reasons\": [     {         \"name\": \"_numOfFailedTransactions\",         \"display_name\": \"Number of failed transactions\",         \"flag\": \"green\",         \"value\": \"0\",         \"is_display\": true       },       {         \"name\": \"_accountAge\",         \"display_name\": \"Account age\",         \"flag\": \"red\",         \"value\": \"0\",         \"is_display\": true       },       {         \"name\": \"_numOfOrderSameIp\",         \"display_name\": \"Number of orders from same IP\",         \"flag\": \"red\",         \"value\": \"11\",         \"is_display\": true       }     ] } ``` 
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ai.thirdwatch.Client.SwaggerDateConverter;

namespace ai.thirdwatch.Model
{
    /// <summary>
    /// The payment_method field type represents information about the payment methods provided by the user. The value must be a nested object with the appropriate item subfields for the given payment method. Generally usedwith the create_order or transaction events. 
    /// </summary>
    [DataContract]
    public partial class PaymentMethod :  IEquatable<PaymentMethod>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentMethod" /> class.
        /// </summary>
        /// <param name="paymentType">Values like - _cash, _check, _creditCard, _debitCard, _netBanking, _wallet, _cryptoCurrency, _electronicFundTransfer, _financing, _giftCard, _interac, _invoice, _moneyOrder, _masterPass, _points, _storeCredit, _thirdPartyProcessor, _voucher.</param>
        /// <param name="amount">The item unit price in numbers, in the base unit of the currency_code.e.g. \&quot;2500\&quot;. In case of multiple payment methods in order it&#39;s useful..</param>
        /// <param name="currencyCode">The [ISO-4217](http://en.wikipedia.org/wiki/ISO_4217) currency code for the amount. e.g., USD, INR alternative currencies, like bitcoin or points systems. In case of multiple payment methods in order it&#39;s useful..</param>
        /// <param name="paymentGateway">fill value like bank name, gateway name, wallet name etc, e.g. payu, paypal, icici, paytm.</param>
        /// <param name="accountName">Account name oif the user for that payment method.</param>
        /// <param name="cardBin">The first six digits of the credit card number. These numbers contain information about the card issuer, the geography and other card details..</param>
        /// <param name="avsResponseCode">Response code from the AVS address verification system. Used in payments involving credit cards..</param>
        /// <param name="cvvResponseCode">Response code from the credit card company indicating if the CVV number entered matches the number on record. Used in payments involving credit cards..</param>
        /// <param name="cardLast4">The last four digits of the credit card number..</param>
        /// <param name="cardExpiryMonth">Expiry month of the card..</param>
        /// <param name="cardExpiryYear">Expiry year of the card..</param>
        public PaymentMethod(string paymentType = default(string), string amount = default(string), string currencyCode = default(string), string paymentGateway = default(string), string accountName = default(string), string cardBin = default(string), string avsResponseCode = default(string), string cvvResponseCode = default(string), string cardLast4 = default(string), string cardExpiryMonth = default(string), string cardExpiryYear = default(string))
        {
            this.paymentType = paymentType;
            this.amount = amount;
            this.currencyCode = currencyCode;
            this.paymentGateway = paymentGateway;
            this.accountName = accountName;
            this.cardBin = cardBin;
            this.avsResponseCode = avsResponseCode;
            this.cvvResponseCode = cvvResponseCode;
            this.cardLast4 = cardLast4;
            this.cardExpiryMonth = cardExpiryMonth;
            this.cardExpiryYear = cardExpiryYear;
        }
        
        /// <summary>
        /// Values like - _cash, _check, _creditCard, _debitCard, _netBanking, _wallet, _cryptoCurrency, _electronicFundTransfer, _financing, _giftCard, _interac, _invoice, _moneyOrder, _masterPass, _points, _storeCredit, _thirdPartyProcessor, _voucher
        /// </summary>
        /// <value>Values like - _cash, _check, _creditCard, _debitCard, _netBanking, _wallet, _cryptoCurrency, _electronicFundTransfer, _financing, _giftCard, _interac, _invoice, _moneyOrder, _masterPass, _points, _storeCredit, _thirdPartyProcessor, _voucher</value>
        [DataMember(Name="_paymentType", EmitDefaultValue=false)]
        public string paymentType { get; set; }

        /// <summary>
        /// The item unit price in numbers, in the base unit of the currency_code.e.g. \&quot;2500\&quot;. In case of multiple payment methods in order it&#39;s useful.
        /// </summary>
        /// <value>The item unit price in numbers, in the base unit of the currency_code.e.g. \&quot;2500\&quot;. In case of multiple payment methods in order it&#39;s useful.</value>
        [DataMember(Name="_amount", EmitDefaultValue=false)]
        public string amount { get; set; }

        /// <summary>
        /// The [ISO-4217](http://en.wikipedia.org/wiki/ISO_4217) currency code for the amount. e.g., USD, INR alternative currencies, like bitcoin or points systems. In case of multiple payment methods in order it&#39;s useful.
        /// </summary>
        /// <value>The [ISO-4217](http://en.wikipedia.org/wiki/ISO_4217) currency code for the amount. e.g., USD, INR alternative currencies, like bitcoin or points systems. In case of multiple payment methods in order it&#39;s useful.</value>
        [DataMember(Name="_currencyCode", EmitDefaultValue=false)]
        public string currencyCode { get; set; }

        /// <summary>
        /// fill value like bank name, gateway name, wallet name etc, e.g. payu, paypal, icici, paytm
        /// </summary>
        /// <value>fill value like bank name, gateway name, wallet name etc, e.g. payu, paypal, icici, paytm</value>
        [DataMember(Name="_paymentGateway", EmitDefaultValue=false)]
        public string paymentGateway { get; set; }

        /// <summary>
        /// Account name oif the user for that payment method
        /// </summary>
        /// <value>Account name oif the user for that payment method</value>
        [DataMember(Name="_accountName", EmitDefaultValue=false)]
        public string accountName { get; set; }

        /// <summary>
        /// The first six digits of the credit card number. These numbers contain information about the card issuer, the geography and other card details.
        /// </summary>
        /// <value>The first six digits of the credit card number. These numbers contain information about the card issuer, the geography and other card details.</value>
        [DataMember(Name="_cardBin", EmitDefaultValue=false)]
        public string cardBin { get; set; }

        /// <summary>
        /// Response code from the AVS address verification system. Used in payments involving credit cards.
        /// </summary>
        /// <value>Response code from the AVS address verification system. Used in payments involving credit cards.</value>
        [DataMember(Name="_avsResponseCode", EmitDefaultValue=false)]
        public string avsResponseCode { get; set; }

        /// <summary>
        /// Response code from the credit card company indicating if the CVV number entered matches the number on record. Used in payments involving credit cards.
        /// </summary>
        /// <value>Response code from the credit card company indicating if the CVV number entered matches the number on record. Used in payments involving credit cards.</value>
        [DataMember(Name="_cvvResponseCode", EmitDefaultValue=false)]
        public string cvvResponseCode { get; set; }

        /// <summary>
        /// The last four digits of the credit card number.
        /// </summary>
        /// <value>The last four digits of the credit card number.</value>
        [DataMember(Name="_cardLast4", EmitDefaultValue=false)]
        public string cardLast4 { get; set; }

        /// <summary>
        /// Expiry month of the card.
        /// </summary>
        /// <value>Expiry month of the card.</value>
        [DataMember(Name="_cardExpiryMonth", EmitDefaultValue=false)]
        public string cardExpiryMonth { get; set; }

        /// <summary>
        /// Expiry year of the card.
        /// </summary>
        /// <value>Expiry year of the card.</value>
        [DataMember(Name="_cardExpiryYear", EmitDefaultValue=false)]
        public string cardExpiryYear { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentMethod {\n");
            sb.Append("  paymentType: ").Append(paymentType).Append("\n");
            sb.Append("  amount: ").Append(amount).Append("\n");
            sb.Append("  currencyCode: ").Append(currencyCode).Append("\n");
            sb.Append("  paymentGateway: ").Append(paymentGateway).Append("\n");
            sb.Append("  accountName: ").Append(accountName).Append("\n");
            sb.Append("  cardBin: ").Append(cardBin).Append("\n");
            sb.Append("  avsResponseCode: ").Append(avsResponseCode).Append("\n");
            sb.Append("  cvvResponseCode: ").Append(cvvResponseCode).Append("\n");
            sb.Append("  cardLast4: ").Append(cardLast4).Append("\n");
            sb.Append("  cardExpiryMonth: ").Append(cardExpiryMonth).Append("\n");
            sb.Append("  cardExpiryYear: ").Append(cardExpiryYear).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentMethod);
        }

        /// <summary>
        /// Returns true if PaymentMethod instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentMethod to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentMethod input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.paymentType == input.paymentType ||
                    (this.paymentType != null &&
                    this.paymentType.Equals(input.paymentType))
                ) && 
                (
                    this.amount == input.amount ||
                    (this.amount != null &&
                    this.amount.Equals(input.amount))
                ) && 
                (
                    this.currencyCode == input.currencyCode ||
                    (this.currencyCode != null &&
                    this.currencyCode.Equals(input.currencyCode))
                ) && 
                (
                    this.paymentGateway == input.paymentGateway ||
                    (this.paymentGateway != null &&
                    this.paymentGateway.Equals(input.paymentGateway))
                ) && 
                (
                    this.accountName == input.accountName ||
                    (this.accountName != null &&
                    this.accountName.Equals(input.accountName))
                ) && 
                (
                    this.cardBin == input.cardBin ||
                    (this.cardBin != null &&
                    this.cardBin.Equals(input.cardBin))
                ) && 
                (
                    this.avsResponseCode == input.avsResponseCode ||
                    (this.avsResponseCode != null &&
                    this.avsResponseCode.Equals(input.avsResponseCode))
                ) && 
                (
                    this.cvvResponseCode == input.cvvResponseCode ||
                    (this.cvvResponseCode != null &&
                    this.cvvResponseCode.Equals(input.cvvResponseCode))
                ) && 
                (
                    this.cardLast4 == input.cardLast4 ||
                    (this.cardLast4 != null &&
                    this.cardLast4.Equals(input.cardLast4))
                ) && 
                (
                    this.cardExpiryMonth == input.cardExpiryMonth ||
                    (this.cardExpiryMonth != null &&
                    this.cardExpiryMonth.Equals(input.cardExpiryMonth))
                ) && 
                (
                    this.cardExpiryYear == input.cardExpiryYear ||
                    (this.cardExpiryYear != null &&
                    this.cardExpiryYear.Equals(input.cardExpiryYear))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.paymentType != null)
                    hashCode = hashCode * 59 + this.paymentType.GetHashCode();
                if (this.amount != null)
                    hashCode = hashCode * 59 + this.amount.GetHashCode();
                if (this.currencyCode != null)
                    hashCode = hashCode * 59 + this.currencyCode.GetHashCode();
                if (this.paymentGateway != null)
                    hashCode = hashCode * 59 + this.paymentGateway.GetHashCode();
                if (this.accountName != null)
                    hashCode = hashCode * 59 + this.accountName.GetHashCode();
                if (this.cardBin != null)
                    hashCode = hashCode * 59 + this.cardBin.GetHashCode();
                if (this.avsResponseCode != null)
                    hashCode = hashCode * 59 + this.avsResponseCode.GetHashCode();
                if (this.cvvResponseCode != null)
                    hashCode = hashCode * 59 + this.cvvResponseCode.GetHashCode();
                if (this.cardLast4 != null)
                    hashCode = hashCode * 59 + this.cardLast4.GetHashCode();
                if (this.cardExpiryMonth != null)
                    hashCode = hashCode * 59 + this.cardExpiryMonth.GetHashCode();
                if (this.cardExpiryYear != null)
                    hashCode = hashCode * 59 + this.cardExpiryYear.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
