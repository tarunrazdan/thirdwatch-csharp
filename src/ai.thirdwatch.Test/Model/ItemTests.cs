/* 
 * Thirdwatch API
 *
 * The first version of the Thirdwatch API is an exciting step forward towards making it easier for developers to pass data to Thirdwatch.  Once you've [registered your website/app](https://thirdwatch.ai) it's easy to start sending data to Thirdwatch.  All endpoints are only accessible via https and are located at `api.thirdwatch.ai`. For instance: you can send event at the moment by ```HTTP POST``` Request to the following URL with your API key in ```Header``` and ```JSON``` data in request body. ```   https://api.thirdwatch.ai/event/v1 ``` Every API request must contain ```API Key``` in header value ```X-THIRDWATCH-API-KEY```  Every event must contain your ```_userId``` (if this is not available, you can alternatively provide a ```_sessionId``` value also in ```_userId```).  JavaScript Fingerprinting module for capturing unique devices and tracking user interaction.  This script will identify unique devices with respect to the browser. For e.g., if chrome is opened in normal mode a unique device id is generated and this will be same if chrome is opened in incognito mode or reinstalled.  Paste the below script onto your webpage, just after the opening `<body>` tag. This script should be added to the page which is accessed externally by the user of your website. For e.g., If you want to track three different webpages then paste the below script onto each webpage, just after the opening `<body>` tag. This script should not be added onto internal tools or admin panels. ```   &lt;script id=\"thirdwatch\"     data-session-cookie-name=\"&lt;cookie_name&gt;\"     data-session-id-value=\"&lt;session_id&gt;\"     data-user-id=\"&lt;user_id&gt;\"     data-app-secret=\"&lt;app_secret&gt;\"     data-is-track-pageview=\"true\"&gt; (function() {         var loadDeviceJs = function() {         var element = document.createElement(\"script\");         element.async = 1;         element.src = \"https://cdn.thirdwatch.ai/tw.min.js\";         document.body.appendChild(element);         };         if (window.addEventListener) {              window.addEventListener(\"load\", loadDeviceJs, false);         } else if (window.attachEvent) {         window.attachEvent(\"onload\", loadDeviceJs);         }     })();   &lt;/script&gt; ``` * `data-session-cookie-name` - - The cookie name where you are saving the unique session id. We will pick the session id by reading its value from the cookie name. (Optional) * `data-session-id-value` - - In case you are not passing `data-session-cookie-name` than you can put session id directly in this parameter. In absence of both `data-session-cookie-name` and `data-session-id-value`, our system will generate a session Id. (Optional) * `data-user-id` - - Unique user id at your end. This can be email id or primary key in the database. In case of guest user, you can insert session Id here. * `data-app-secret` - - Unique App secret generated for you by Thirdwatch. * `data-is-track-pageview` - - If this is set to true, then the url on which this script is running will be sent to Thirdwatch, else the url will not be captured.   The Score API is use to get an up to date cutomer trust score after you have sent transaction event and order successful. This API will provide the riskiness score of the order with reasons. Some examples of when you may want to check the score are before:    - Before Shippement of a package   - Finalizing a money transfer   - Giving access to a prearranged vacation rental   - Sending voucher on mail  ```   https://api.thirdwatch.ai/neo/v1/score?api_key=<your api key>&order_id=<Order id> ```  According to Score you can decide to take action Approve or Reject. Orders with score more than 70 will consider as Riskey orders. We'll provide some reasons also in rules section.   ``` {   \"order_id\": \"OCT45671\",   \"user_id\": \"ajay_245\",   \"order_timestamp\": \"2017-05-09T09:40:45.717Z\",   \"score\": 82,   \"flag\": \"red\",     -\"reasons\": [     {         \"name\": \"_numOfFailedTransactions\",         \"display_name\": \"Number of failed transactions\",         \"flag\": \"green\",         \"value\": \"0\",         \"is_display\": true       },       {         \"name\": \"_accountAge\",         \"display_name\": \"Account age\",         \"flag\": \"red\",         \"value\": \"0\",         \"is_display\": true       },       {         \"name\": \"_numOfOrderSameIp\",         \"display_name\": \"Number of orders from same IP\",         \"flag\": \"red\",         \"value\": \"11\",         \"is_display\": true       }     ] } ``` 
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


using NUnit.Framework;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using ai.thirdwatch.Api;
using ai.thirdwatch.Model;
using ai.thirdwatch.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace ai.thirdwatch.Test
{
    /// <summary>
    ///  Class for testing Item
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the model.
    /// </remarks>
    [TestFixture]
    public class ItemTests
    {
        // TODO uncomment below to declare an instance variable for Item
        //private Item instance;

        /// <summary>
        /// Setup before each test
        /// </summary>
        [SetUp]
        public void Init()
        {
            // TODO uncomment below to create an instance of Item
            //instance = new Item();
        }

        /// <summary>
        /// Clean up after each test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of Item
        /// </summary>
        [Test]
        public void ItemInstanceTest()
        {
            // TODO uncomment below to test "IsInstanceOfType" Item
            //Assert.IsInstanceOfType<Item> (instance, "variable 'instance' is a Item");
        }


        /// <summary>
        /// Test the property 'itemId'
        /// </summary>
        [Test]
        public void itemIdTest()
        {
            // TODO unit test for the property 'itemId'
        }
        /// <summary>
        /// Test the property 'productTitle'
        /// </summary>
        [Test]
        public void productTitleTest()
        {
            // TODO unit test for the property 'productTitle'
        }
        /// <summary>
        /// Test the property 'price'
        /// </summary>
        [Test]
        public void priceTest()
        {
            // TODO unit test for the property 'price'
        }
        /// <summary>
        /// Test the property 'currencyCode'
        /// </summary>
        [Test]
        public void currencyCodeTest()
        {
            // TODO unit test for the property 'currencyCode'
        }
        /// <summary>
        /// Test the property 'upc'
        /// </summary>
        [Test]
        public void upcTest()
        {
            // TODO unit test for the property 'upc'
        }
        /// <summary>
        /// Test the property 'sku'
        /// </summary>
        [Test]
        public void skuTest()
        {
            // TODO unit test for the property 'sku'
        }
        /// <summary>
        /// Test the property 'isbn'
        /// </summary>
        [Test]
        public void isbnTest()
        {
            // TODO unit test for the property 'isbn'
        }
        /// <summary>
        /// Test the property 'brand'
        /// </summary>
        [Test]
        public void brandTest()
        {
            // TODO unit test for the property 'brand'
        }
        /// <summary>
        /// Test the property 'manufacturer'
        /// </summary>
        [Test]
        public void manufacturerTest()
        {
            // TODO unit test for the property 'manufacturer'
        }
        /// <summary>
        /// Test the property 'category'
        /// </summary>
        [Test]
        public void categoryTest()
        {
            // TODO unit test for the property 'category'
        }
        /// <summary>
        /// Test the property 'tags'
        /// </summary>
        [Test]
        public void tagsTest()
        {
            // TODO unit test for the property 'tags'
        }
        /// <summary>
        /// Test the property 'color'
        /// </summary>
        [Test]
        public void colorTest()
        {
            // TODO unit test for the property 'color'
        }
        /// <summary>
        /// Test the property 'quantity'
        /// </summary>
        [Test]
        public void quantityTest()
        {
            // TODO unit test for the property 'quantity'
        }
        /// <summary>
        /// Test the property 'isOnSale'
        /// </summary>
        [Test]
        public void isOnSaleTest()
        {
            // TODO unit test for the property 'isOnSale'
        }
        /// <summary>
        /// Test the property 'maxQuantity'
        /// </summary>
        [Test]
        public void maxQuantityTest()
        {
            // TODO unit test for the property 'maxQuantity'
        }
        /// <summary>
        /// Test the property 'discountPrice'
        /// </summary>
        [Test]
        public void discountPriceTest()
        {
            // TODO unit test for the property 'discountPrice'
        }
        /// <summary>
        /// Test the property 'productWeight'
        /// </summary>
        [Test]
        public void productWeightTest()
        {
            // TODO unit test for the property 'productWeight'
        }
        /// <summary>
        /// Test the property 'country'
        /// </summary>
        [Test]
        public void countryTest()
        {
            // TODO unit test for the property 'country'
        }
        /// <summary>
        /// Test the property 'descriptionShort'
        /// </summary>
        [Test]
        public void descriptionShortTest()
        {
            // TODO unit test for the property 'descriptionShort'
        }
        /// <summary>
        /// Test the property 'description'
        /// </summary>
        [Test]
        public void descriptionTest()
        {
            // TODO unit test for the property 'description'
        }
        /// <summary>
        /// Test the property 'seller'
        /// </summary>
        [Test]
        public void sellerTest()
        {
            // TODO unit test for the property 'seller'
        }

    }

}
